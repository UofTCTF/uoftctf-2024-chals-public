from Crypto.Util.number import inverse

# Prime numbers (p and q)
p = 151974537061323957822386073908385085419559026351164685426097479266890291010147521691623222013307654711435195917538910433499461592808140930995554881397135856676650008657702221890681556382541341154333619026995004346614954741516470916984007797447848200982844325683748644670322174197570545222141895743221967042369
q = 174984645401233071825665708002522121612485226530706132712010887487642973021704769474826989160974464933559818767568944237124745165979610355867977190192654030573049063822083356316183080709550520634370714336131664619311165756257899116089875225537979520325826655873483634761961805768588413832262117172840398661229

# Computing n and Euler's Totient function (phi)
n = p * q
phi = (p - 1) * (q - 1)

# find original e using music sheet cipher online
e = 7029307

# Computing the private exponent, d
d = inverse(e, phi)


# Encrypting the message: c = m^e mod n
encrypted_message_int = 13798492512038760070176175279601263544116956273815547670915057561532348462120753731852024424193899030774938204962799194756105401464136384387458651343975594539877218889319074841918281784494580079814736461158750759327630935335333130007375268812456855987866715978531148043248418247223808114476698088473278808360178546541128684643502788861786419871174570376835894025839847919827231356213726961581598139013383568524808876923469958771740011288404737208217659897319372970291073214528581692244433371304465252501970552162445326313782129351056851978201181794212716520630569898498364053054452320641433167009005762663177324539460

# Decrypting the message: m = c^d mod n
decrypted_message_int = pow(encrypted_message_int, d, n)

# Converting the decrypted integer back to a string
decrypted_message = decrypted_message_int.to_bytes((decrypted_message_int.bit_length() + 7) // 8, 'big').decode()

print(decrypted_message)
